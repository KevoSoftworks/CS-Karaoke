package com.kevosoftworks.rpifpgaiface;

import java.io.IOException;
import java.util.Random;

import com.pi4j.io.gpio.GpioController;
import com.pi4j.io.gpio.GpioFactory;
import com.pi4j.io.gpio.GpioPinDigitalOutput;
import com.pi4j.io.gpio.PinState;
import com.pi4j.io.gpio.RaspiPin;
import com.pi4j.io.spi.SpiChannel;
import com.pi4j.io.spi.SpiDevice;
import com.pi4j.io.spi.SpiFactory;
import com.pi4j.util.Console;
import com.pi4j.wiringpi.Spi;

public class SPIInterface {
	
	public SpiDevice spi;
	GpioController gpio;
	GpioPinDigitalOutput pin;
	int i = 0;
	int loops = 0;
	
	byte[] lala;
	Random r;
	int blen;
	
	public SPIInterface(int l, int blen){
		gpio = GpioFactory.getInstance();
		pin = gpio.provisionDigitalOutputPin(RaspiPin.GPIO_01, "MyLED", PinState.HIGH);
		if(!this.initialise()){
			System.out.println("Cannot init SPI interface!");
		}
		this.blen = blen;
		lala = new byte[this.blen];
		r = new Random();
		this.loops = l;
	}
	
	public boolean initialise(){
		int fd = Spi.wiringPiSPISetup(0, 500000);
        if (fd <= -1) {
            System.out.println(" ==>> SPI SETUP FAILED");
            return false;
        }
        return true;
	}
	
	public void read() throws IOException, InterruptedException {
		//byte send = (byte) (i%255);
		r.nextBytes(lala);
        //this.sendByte(send);
        byte[] receive = this.readByte(lala);
        if(i%(loops/10) == 0)System.out.println("Sent: " + byteToString(lala[0]) + " (" + lala[0] + "); Received: " + byteToString(receive[0]) + " (" + receive[0] + ");");
        i++;
        if(i == loops) Main.running = false;
    }
	
	public boolean sendData(byte[] data){
		boolean res = true;
		for(byte b:data){
			res = this.sendByte(b);
			if(!res){
				System.out.println("Error in sending data");
				return res;
			}
		}
		return res;
	}
	
	public boolean sendByte(int b){
		try {
			spi.write((byte)b);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
		return true;
	}
	
	public byte[] readByte(byte[] b){
		byte[] ret = b.clone();
		Spi.wiringPiSPIDataRW(0, ret, 1);
		return ret;
	}
	
	public String byteToString(byte b){
		return String.format("%8s", Integer.toBinaryString(b & 0xFF)).replace(' ', '0');
	}

}
